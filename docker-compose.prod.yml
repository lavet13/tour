version: "3.9"

services:
  # Frontend (nginx with certbot)
  tour-frontend:
    container_name: tour-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    volumes:
      - letsencrypt:/etc/letsencrypt
      - uploads:/usr/share/nginx/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - webnet
    depends_on:
      - certbot

  certbot:
    image: lionur/certbot-dns-regru
    container_name: certbot
    volumes:
      # Монтируем volume для Let's Encrypt
      - letsencrypt:/etc/letsencrypt
      # Монтируем файл конфигурации для DNS-плагина
      - ./frontend/certbot/regru.ini:/etc/letsencrypt/regru.ini:ro
    entrypoint: >
      sh -c "
        certbot certonly
        -a certbot-regru:dns
        --certbot-regru:dns-credentials /etc/letsencrypt/regru.ini
        --certbot-regru:dns-propagation-seconds 60
        -d donbass-tour.online -d www.donbass-tour.online
        --non-interactive --agree-tos --email your-email@example.com
      "
    networks:
      - webnet
    restart: unless-stopped

  # GraphQL Server
  tour-graphql:
    container_name: tour-graphql
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: always
    env_file:
      - ./backend/.env.production
    depends_on:
      - tour-db
    volumes:
      - ./backend/uploads:/app/uploads # Add this volume mount
      - uploads:/app/uploads
    ports:
      - "4000:4000"
    networks:
      - webnet

  # Database (PostgreSQL)
  tour-db:
    container_name: tour-db
    image: bitnami/postgresql:16.0.0
    restart: always
    env_file:
      - ./backend/.env.production
    volumes:
      - postgres_data:/bitnami/postgresql
    ports:
      - "${DB_PORT:-5431}:5432"
    networks:
      - webnet

volumes:
  postgres_data:
  letsencrypt: # Add this volume for storing certificates
  uploads:

networks:
  webnet:
    driver: bridge
