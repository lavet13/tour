import prisma from '@/prisma';
import { $Enums } from '@prisma/client';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';
import {
  confirmedBookingMessage,
  getBookingStatus,
  getInlineKeyboardForBookings,
  formatBookingMessage,
} from '@/services/grammy/api/bookings/formatters';
import { CallbackQueryMiddleware } from 'grammy';
import { CustomContext } from '../..';

export const handleBookingStatus: CallbackQueryMiddleware<
  CustomContext
> = async ctx => {
  const bookingId = ctx.match[1];

  let newStatus: $Enums.BookingStatus | null = null;

  try {
    const { status: currentStatus } = await prisma.booking.findUniqueOrThrow({
      where: {
        id: bookingId,
      },
      select: {
        status: true,
      },
    });

    if (currentStatus === 'PENDING') {
      newStatus = 'CONFIRMED';
    }
    if (currentStatus === 'CONFIRMED') {
      newStatus = 'PENDING';
    }
    if (!newStatus) {
      throw new Error(`–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.`);
    }

    const updatedBooking = await prisma.booking.update({
      where: {
        id: bookingId,
      },
      data: {
        status: newStatus,
      },
      include: {
        route: {
          include: {
            departureCity: {
              select: {
                name: true,
              },
            },
            arrivalCity: {
              select: {
                name: true,
              },
            },
          },
        },
      },
    });

    const msgToManager = await formatBookingMessage(updatedBooking);
    let message = msgToManager;

    if (newStatus === 'CONFIRMED') {
      if (updatedBooking.telegramId) {
        message += `\n\n‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram\n`;
        message += `<i>üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:</i>\n\n`;
        message += confirmedBookingMessage(updatedBooking, { richText: true });

        await ctx.api.sendMessage(
          updatedBooking.telegramId.toString(),
          confirmedBookingMessage(updatedBooking, { richText: true }),
          { parse_mode: 'HTML' },
        );
      } else {
        message += `\n\n‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n`;
        message += `<i>–ü—Ä–∏—á–∏–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏</i>`;
      }
    }

    const inlineKeyboard = getInlineKeyboardForBookings(
      updatedBooking.id,
      newStatus,
      confirmedBookingMessage(updatedBooking),
    );

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: inlineKeyboard,
    });
  } catch (error) {
    // Check if it's a not found error
    if (error instanceof PrismaClientKnownRequestError) {
      switch (error.code) {
        case 'P2025':
          // Record not found
          await ctx.reply(`‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID ${bookingId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
          return;
        case 'P2003':
          // Foreign key constraint violation
          await ctx.reply(
            `‚ùå –û—à–∏–±–∫–∞: –º–∞—Ä—à—Ä—É—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.`,
          );
          return;
        case 'P2002':
          // Unique constraint violation (unlikely in this case, but included for completeness)
          await ctx.reply(
            `‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.`,
          );
          return;
      }
    }
    throw error;
  } finally {
    await ctx.answerCallbackQuery({
      ...(newStatus
        ? { text: `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${getBookingStatus(newStatus)}!` }
        : {}),
    });
  }
};
