import {
  formatRussianDate,
  formatRussianDateTime,
} from '@/helpers/format-russian-date';
import { $Enums, BookingStatus, Prisma } from '@prisma/client';
import prisma from '@/prisma';
import { InlineKeyboard } from 'grammy';

export const bookingMessage = async (
  booking: Prisma.BookingGetPayload<{
    include: {
      route: {
        include: {
          arrivalCity: {
            select: {
              name: true;
            };
          };
          departureCity: {
            select: {
              name: true;
            };
          };
        };
      };
    };
  }>,
): Promise<string> => {
  const telegramUser = await prisma.telegramUser.findUnique({
    where: {
      telegramId: booking.telegramId ?? undefined,
    },
  });
  const isForward = booking.direction === 'FORWARD';
  const isBackward = booking.direction === 'BACKWARD';

  let routeName: string = '';

  if (isForward) {
    routeName += `${booking.route?.departureCity.name} - ${booking.route?.arrivalCity.name}`;
  }

  if (isBackward) {
    routeName += `${booking.route?.arrivalCity.name} - ${booking.route?.departureCity.name}`;
  }

  let content = ``;

  content += `<b>üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n`;
  content += `<b>üë§ –ö–ª–∏–µ–Ω—Ç</b>\n<code>${booking.lastName} ${booking.firstName}</code>\n\n`;
  content += `<b>üìû –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n`;
  content += `‚îú <b><em>–¢–µ–ª–µ—Ñ–æ–Ω</em></b>\n<a>${booking.phoneNumber}</a>\n`;

  if (booking.telegram) {
    const separator = booking.whatsapp ? `‚îú` : `‚îî`;

    if (telegramUser?.username) {
      // Direct link available
      content += `${separator} <b><em>Telegram</em></b>\n<a href="https://t.me/${telegramUser.username}">–ø–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>${booking.whatsapp ? `\n` : `\n\n`}`;
    } else if (telegramUser?.telegramId) {
      // No username - show phone number as fallback contact
      content += `${separator} <b><em>Telegram</em></b>\n${booking.phoneNumber} (–Ω–µ—Ç @username)${booking.whatsapp ? `\n` : `\n\n`}`;
    }
  }
  if (booking.whatsapp) {
    content += `‚îî <b><em>Whatsapp</em></b>\n<a href="https://wa.me/${booking.phoneNumber}">–ø–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>\n\n`;
  }

  if (booking.extraPhoneNumber) {
    content += `<b>üì± –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n`;
  }

  if (booking.extraPhoneNumber) {
    content += `‚îú <b><em>–¢–µ–ª–µ—Ñ–æ–Ω</em></b>\n${booking.extraPhoneNumber}\n`;
  }

  if (booking.extraTelegram) {
    const separator = booking.extraWhatsapp ? `‚îú` : `‚îî`;
    content += `${separator} <b><em>Telegram</em></b>\n<a href="https://t.me/${booking.extraPhoneNumber}">–ø–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>${booking.extraWhatsapp ? `\n` : `\n\n`}`;
  }
  if (booking.extraWhatsapp) {
    content += `‚îî <b><em>Whatsapp: </em></b>\n<a href="https://wa.me/${booking.extraPhoneNumber}">–ø–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>\n\n`;
  }

  content += `<b>üöç –ú–∞—Ä—à—Ä—É—Ç</b>\n${routeName}\n\n`;

  content += `<b>ü™ë –ú–µ—Å—Ç</b>\n${booking.seatsCount}\n\n`;

  content += `<b>üìÖ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏</b>\n${formatRussianDate(booking.travelDate)}\n\n`;

  content += `<b>‚è∞ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</b>\n${formatRussianDateTime(booking.createdAt)}\n\n`;

  content += `<b>–°—Ç–∞—Ç—É—Å</b>\n${getBookingStatus(booking.status)}`;

  return content;
};

export const noAvailabilityBookingMessage = (
  booking: Prisma.BookingGetPayload<{
    include: {
      route: {
        include: {
          departureCity: {
            select: {
              name: true;
            };
          };
          arrivalCity: {
            select: {
              name: true;
            };
          };
        };
      };
    };
  }>,
  { richText = false } = {},
) => {
  let routeName = '';
  const isForward = booking.direction === 'FORWARD';
  const isBackward = booking.direction === 'BACKWARD';

  if (isForward) {
    routeName += `${booking.route?.departureCity.name} ‚Üí ${booking.route?.arrivalCity.name}`;
  }

  if (isBackward) {
    routeName += `${booking.route?.arrivalCity.name} ‚Üí ${booking.route?.departureCity.name}`;
  }

  let message = '';

  if (richText) {
    message += `üòî <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –í–∞–º–∏ –¥–∞—Ç—É –º–µ—Å—Ç –ù–ï–¢.</b>\n\n`;
    message += `üöå <b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${routeName}\n`;
    message += `üìÖ <b>–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏:</b> ${formatRussianDate(booking.travelDate)}\n`;
    message += `ü™ë <b>–ó–∞–ø—Ä–æ—à–µ–Ω–æ –º–µ—Å—Ç:</b> ${booking.seatsCount}`;
  } else {
    message += `–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –í–∞–º–∏ –¥–∞—Ç—É –º–µ—Å—Ç –ù–ï–¢.\n\n`;
    message += `–ú–∞—Ä—à—Ä—É—Ç: ${routeName}\n`;
    message += `–î–∞—Ç–∞: ${formatRussianDate(booking.travelDate)}\n`;
    message += `–ó–∞–ø—Ä–æ—à–µ–Ω–æ –º–µ—Å—Ç: ${booking.seatsCount}`;
  }

  return message;
};

export const confirmedBookingMessage = (
  updatedBooking: Prisma.BookingGetPayload<{
    include: {
      route: {
        include: {
          departureCity: {
            select: {
              name: true;
            };
          };
          arrivalCity: {
            select: {
              name: true;
            };
          };
        };
      };
    };
  }>,
  { richText = false } = {},
) => {
  let routeName = '';
  const isForward = updatedBooking.direction === 'FORWARD';
  const isBackward = updatedBooking.direction === 'BACKWARD';

  if (isForward) {
    routeName += `${updatedBooking.route?.departureCity.name} ‚Üí ${updatedBooking.route?.arrivalCity.name}`;
  }

  if (isBackward) {
    routeName += `${updatedBooking.route?.arrivalCity.name} ‚Üí ${updatedBooking.route?.departureCity.name}`;
  }

  let message = '';

  if (richText) {
    message += `üéâ –í–∞—à–∞ <b>–ë–†–û–ù–¨ –ü–†–ò–ù–Ø–¢–ê.</b> –ó–∞ –¥–µ–Ω—å –¥–æ –≤—ã–µ–∑–¥–∞ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ –¥–∞—Å—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–µ–∑–¥–∫–µ.\n\n`;
    message += `üöå <b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${routeName}\n`;
    message += `üí∞ <b>–¶–µ–Ω–∞:</b> ${updatedBooking.route?.price} ‚ÇΩ\n`;
    message += `üìÖ <b>–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏:</b> ${formatRussianDate(updatedBooking.travelDate)}\n`;
    message += `ü™ë <b>–ú–µ—Å—Ç:</b> ${updatedBooking.seatsCount}\n\n`;
    message += `üìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n`;
    message += `‚ô• –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º!`;
  } else {
    message += `–í–∞—à–∞ –±—Ä–æ–Ω—å –ü–†–ò–ù–Ø–¢–ê. –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –∑–∞ –¥–µ–Ω—å –¥–æ –≤—ã–µ–∑–¥–∞.\n\n`;
    message += `–ú–∞—Ä—à—Ä—É—Ç: ${routeName}\n`;
    message += `–¶–µ–Ω–∞: ${updatedBooking.route?.price} ‚ÇΩ\n`;
    message += `–î–∞—Ç–∞: ${formatRussianDate(updatedBooking.travelDate)}\n`;
    message += `–ú–µ—Å—Ç: ${updatedBooking.seatsCount}\n\n`;
    message += `–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n`;
    message += `–°–ø–∞—Å–∏–±–æ!`;
  }

  return message;
};

export const getBookingStatus = (status: $Enums.BookingStatus): string => {
  if (status === 'PENDING') {
    return 'üí§ –û–∂–∏–¥–∞–µ—Ç';
  }
  if (status === 'CONFIRMED') {
    return '‚úÖ –ü—Ä–∏–Ω—è—Ç';
  }

  return '‚ùå –û—à–∏–±–∫–∞';
};

export const getInlineKeyboardForBookings = ({
  bookingId,
  status,
  bookingDetailsCopyMessage,
  noAvailabilityCopyMessage,
  canSendBookingDetailsMessage = false,
  canSendNoAvailabilityMessage = false,
}: {
  bookingId: string;
  status: BookingStatus;
  bookingDetailsCopyMessage?: string;
  noAvailabilityCopyMessage?: string;
  canSendBookingDetailsMessage?: boolean;
  canSendNoAvailabilityMessage?: boolean;
}): InlineKeyboard => {
  const inlineKeyboard = new InlineKeyboard();

  let text: string = '';

  if (status === 'PENDING') {
    text = '‚úÖ –ü—Ä–∏–Ω—è—Ç—å';
  }
  if (status === 'CONFIRMED') {
    text = 'üí§ –û–∂–∏–¥–∞—Ç—å';
  }

  inlineKeyboard.text(text, `booking:status_${bookingId}`).row();

  if (bookingDetailsCopyMessage && status === 'CONFIRMED') {
    inlineKeyboard.copyText('üìù –ë—Ä–æ–Ω—å', bookingDetailsCopyMessage);
  }

  if (noAvailabilityCopyMessage && status === 'CONFIRMED') {
    inlineKeyboard.copyText('üìù –û—Ç–∫–∞–∑', noAvailabilityCopyMessage).row();
  }

  if (canSendBookingDetailsMessage) {
    inlineKeyboard.text('üì© –ë—Ä–æ–Ω—å', `booking:send-message_${bookingId}`);
  }

  if (canSendNoAvailabilityMessage) {
    inlineKeyboard
      .text('üì© –û—Ç–∫–∞–∑', `booking:send-no-availability_${bookingId}`)
      .row();
  }

  if (canSendNoAvailabilityMessage && canSendBookingDetailsMessage) {
    inlineKeyboard
      .text(
        'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É',
        `booking:send-notify-client_${bookingId}`,
      )
      .row();
  }

  return inlineKeyboard;
};
