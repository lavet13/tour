import {
  $Enums,
  Booking,
  BookingStatus,
  City,
  Prisma,
  Route,
} from '@prisma/client';
import {
  formatRussianDate,
  formatRussianDateTime,
} from '@/helpers/format-russian-date';
import prisma from '@/prisma';
import TelegramBot from 'node-telegram-bot-api';

/**
 * Format booking status for display
 * @param status Booking status
 * @returns Formatted status string
 */
const getBookingStatus = (status: $Enums.BookingStatus): string => {
  if (status === 'PENDING') {
    return 'üí§ –û–∂–∏–¥–∞–µ—Ç';
  }
  if (status === 'CONFIRMED') {
    return '‚úÖ –ü—Ä–∏–Ω—è—Ç';
  }

  return '-';
};

type RouteWithCities = Prisma.RouteGetPayload<{
  include: {
    arrivalCity: { select: { name: true } };
    departureCity: { select: { name: true } };
  };
}>;

/**
 * Format booking details into a readable message
 * @param booking Booking object
 * @returns Formatted message in HTML
 */
const formatBookingMessage = async (
  booking: Booking,
  prismaClient: typeof prisma,
  route?: RouteWithCities | null,
): Promise<string> => {
  if (!route) {
    route = await prismaClient.route.findUniqueOrThrow({
      where: {
        id: booking.routeId as string,
      },
      include: {
        departureCity: {
          select: {
            name: true,
          },
        },
        arrivalCity: {
          select: {
            name: true,
          },
        },
      },
    });
  }

  const isForward = booking.direction === 'FORWARD';
  const isBackward = booking.direction === 'BACKWARD';

  let routeName: string = '';

  if (isForward) {
    routeName += `${route.departureCity.name} - ${route.arrivalCity.name}`;
  }

  if (isBackward) {
    routeName += `${route.arrivalCity.name} - ${route.departureCity.name}`;
  }

  let content = ``;

  content += `<b>üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n`;
  content += `<b>üë§ –ö–ª–∏–µ–Ω—Ç</b>\n<code>${booking.lastName} ${booking.firstName}</code>\n\n`;
  content += `<b>üìû –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n`;
  content += `‚îú <b><em>–¢–µ–ª–µ—Ñ–æ–Ω</em></b>\n<a>${booking.phoneNumber}</a>\n`;

  if (booking.telegram) {
    const separator = booking.whatsapp ? `‚îú` : `‚îî`;
    content += `${separator} <b><em>Telegram</em></b>\n<a href="https://t.me/${booking.phoneNumber}">–ø–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>${booking.whatsapp ? `\n` : `\n\n`}`;
  }
  if (booking.whatsapp) {
    content += `‚îî <b><em>Whatsapp</em></b>\n<a href="https://wa.me/${booking.phoneNumber}">–ø–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>\n\n`;
  }

  if (booking.extraPhoneNumber) {
    content += `<b>üì± –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n`;
  }

  if (booking.extraPhoneNumber) {
    content += `‚îú <b><em>–¢–µ–ª–µ—Ñ–æ–Ω</em></b>\n${booking.extraPhoneNumber}\n`;
  }

  if (booking.extraTelegram) {
    const separator = booking.extraWhatsapp ? `‚îú` : `‚îî`;
    content += `${separator} <b><em>Telegram</em></b>\n<a href="https://t.me/${booking.extraPhoneNumber}">–ø–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>${booking.extraWhatsapp ? `\n` : `\n\n`}`;
  }
  if (booking.extraWhatsapp) {
    content += `‚îî <b><em>Whatsapp: </em></b>\n<a href="https://wa.me/${booking.extraPhoneNumber}">–ø–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>\n\n`;
  }

  content += `<b>üöç –ú–∞—Ä—à—Ä—É—Ç</b>\n${routeName}\n\n`;

  content += `<b>ü™ë –ú–µ—Å—Ç</b>\n${booking.seatsCount}\n\n`;

  content += `<b>üìÖ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏</b>\n${formatRussianDate(booking.travelDate)}\n\n`;

  content += `<b>‚è∞ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</b>\n${formatRussianDateTime(booking.createdAt)}\n\n`;

  content += `<b>–°—Ç–∞—Ç—É—Å</b>\n${getBookingStatus(booking.status)}`;

  return content;
};

/**
 * Create booking actions keyboard with confirm/pending buttons
 * @param bookingId ID of the booking
 * @returns Inline keyboard markup
 */
const getBookingActionsKeyboard = (
  bookingId: string,
  status: BookingStatus,
): TelegramBot.InlineKeyboardMarkup => {
  const buttons = [];

  let text: string = '';

  if (status === 'PENDING') {
    text = '‚úÖ –ü—Ä–∏–Ω—è—Ç—å';
  }
  if (status === 'CONFIRMED') {
    text = 'üí§ –û–∂–∏–¥–∞—Ç—å';
  }

  buttons.push({
    text,
    callback_data: `booking:status_${bookingId}`,
  });

  return {
    inline_keyboard: [buttons],
  };
};

export const formatters = {
  getBookingStatus,
  formatBookingMessage,
  getBookingActionsKeyboard,
};
