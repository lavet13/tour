import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';
import { formatters } from '@/services/telegram/features/bookings/formatters';
import { sendMessage } from '@/services/telegram/services/message.service';
import { handleTelegramError } from '@/services/telegram/services/error.service';
import { CallbackHandler } from '../..';
import { $Enums } from '@prisma/client';

const bookingStatusChange: CallbackHandler['handle'] = async (
  bot,
  chatId,
  messageId,
  data,
  _query,
  prismaClient,
): Promise<void> => {
  let bookingId: string;

  if (data.startsWith('booking:status_')) {
    bookingId = data.replace('booking:status_', '');
  } else {
    console.error(`Invalid booking callback data: ${data}`);
    return;
  }

  try {
    const { status: currentStatus } =
      await prismaClient.booking.findUniqueOrThrow({
        where: { id: bookingId },
        select: {
          status: true,
        },
      });

    let newStatus: $Enums.BookingStatus | null = null;

    if (currentStatus === 'PENDING') {
      newStatus = 'CONFIRMED';
    }
    if (currentStatus === 'CONFIRMED') {
      newStatus = 'PENDING';
    }
    if (!newStatus) {
      throw new Error(`–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.`);
    }

    const updatedBooking = await prismaClient.booking.update({
      where: {
        id: bookingId,
      },
      data: {
        status: newStatus,
      },
      include: {
        route: {
          include: {
            departureCity: {
              select: {
                name: true,
              },
            },
            arrivalCity: {
              select: {
                name: true,
              },
            },
          },
        },
      },
    });

    const formattedMessage = await formatters.formatBookingMessage(
      updatedBooking,
      prismaClient,
      updatedBooking.route,
    );

    let message = formattedMessage;
    if (updatedBooking.telegramId) {
      message += `\n\n‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram\n`;
      message += `<i>üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:</i>\n\n`;
      message += formatters.bookingMessageToSend(updatedBooking, newStatus);
    } else {
      message += `\n\n‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n`;
      message += `<i>–ü—Ä–∏—á–∏–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏</i>`;
    }

    const keyboard = formatters.getBookingActionsKeyboard(
      updatedBooking.id,
      newStatus,
    );

    await bot?.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });

    if (!updatedBooking.telegramId && newStatus === 'CONFIRMED') {
      await bot.sendMessage(
        chatId,
        formatters.bookingMessageToSend(updatedBooking, newStatus),
        { parse_mode: 'HTML' },
      );
    }
  } catch (error) {
    console.error('Error handling booking status change:', error);

    // Check if it's a not found error
    if (error instanceof PrismaClientKnownRequestError) {
      switch (error.code) {
        case 'P2025':
          // Record not found
          await sendMessage(
            chatId,
            `‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID ${bookingId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`,
          );
          return;
        case 'P2003':
          // Foreign key constraint violation
          await sendMessage(
            chatId,
            `‚ùå –û—à–∏–±–∫–∞: –º–∞—Ä—à—Ä—É—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.`,
          );
          return;
        case 'P2002':
          // Unique constraint violation (unlikely in this case, but included for completeness)
          await sendMessage(
            chatId,
            `‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.`,
          );
          return;
      }
    } else {
      handleTelegramError(error);
    }
  }
};

export const handlers = {
  bookingStatusChange,
};
