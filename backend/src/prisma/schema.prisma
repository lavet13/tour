// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @default(USER)

  @@unique([userId, role])
  @@map("user_roles")
}

model User {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
  roles        UserRole[]

  @@index([email])
  @@map("users")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId, token])
  @@map("refresh_tokens")
}

enum BookingStatus {
  PENDING // Ожидает обработки
  CONFIRMED // Подтверждено-ожидайте звонка диспетчера
}

model City {
  id             String   @id @default(cuid())
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  departureTrips Route[]  @relation("RouteDepartureCity")
  arrivalTrips   Route[]  @relation("RouteArrivalCity")

  @@index([name])
  @@map("cities")
}

model Schedule {
  id             String     @id @default(cuid())
  route          Route      @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId        String
  dayOfWeek      DaysOfWeek
  travelDate     DateTime // Конкретный день, для которого действует расписание
  startTime      DateTime // Переопределение времени отправления
  endTime        DateTime // Переопределение времени прибытия
  seatsAvailable Int // Свободные места на этот день
  seatsBooked    Int        @default(0) // Уже забронированные места
  isActive       Boolean    @default(true)
  price          Int // Перезапись базовой цены (если null, используется из Schedule)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([routeId, travelDate])
  @@index([routeId, travelDate, isActive])
  @@index([dayOfWeek, isActive])
  @@map("schedules")
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Region {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  routes    Route[]

  @@map("regions")
}

model Route {
  id              String     @id @default(cuid())
  departureCity   City       @relation("RouteDepartureCity", fields: [departureCityId], references: [id])
  departureCityId String
  arrivalCity     City       @relation("RouteArrivalCity", fields: [arrivalCityId], references: [id])
  arrivalCityId   String
  schedules       Schedule[]
  region          Region?    @relation(fields: [regionId], references: [id])
  regionId        String?
  isActive        Boolean    @default(true)
  departureDate   DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  bookings        Booking[]

  @@unique([departureCityId, arrivalCityId])
  @@index([departureCityId, arrivalCityId, isActive])
  @@index([regionId])
  @@map("routes")
}

model Booking {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  phoneNumber String
  commentary  String?
  route       Route?        @relation(fields: [routeId], references: [id])
  routeId     String?
  travelDate  DateTime
  seatsCount  Int
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([status, routeId, travelDate, phoneNumber])
  @@map("bookings")
}
