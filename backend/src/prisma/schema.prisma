// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @default(USER)

  @@unique([userId, role])
  @@map("user_roles")
}

model TelegramUser {
  id         String   @id @default(cuid())
  telegramId BigInt      @unique
  firstName  String
  lastName   String?
  username   String?
  photoUrl   String?
  authDate   DateTime
  hash       String
  userId     String?  @unique
  user       User?    @relation(fields: [userId], references: [id]) // onDelete: SetNull
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([telegramId])
  @@map("telegram_users")
}

model User {
  id           String         @id @default(cuid())
  name         String
  email        String?        @unique
  password     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
  roles        UserRole[]
  telegramUser TelegramUser?
  telegramChat TelegramChat[]

  @@index([email])
  @@map("users")
}

model TelegramChat {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  chatId    BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chatId])
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId, token])
  @@map("refresh_tokens")
}

enum BookingStatus {
  PENDING // Ожидает обработки
  CONFIRMED // Подтверждено-ожидайте звонка диспетчера
}

model City {
  id             String     @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  departureTrips Route[]    @relation("RouteDepartureCity")
  arrivalTrips   Route[]    @relation("RouteArrivalCity")
  Schedule       Schedule[]

  @@index([name])
  @@map("cities")
}

model Schedule {
  id        String         @id @default(cuid())
  route     Route          @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId   String
  direction RouteDirection // FORWARD = A → B, BACKWARD = B → A
  cityId    String
  city      City           @relation(fields: [cityId], references: [id])
  stopName  String?
  time      String?
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([routeId, direction, isActive])
  @@index([routeId, time]) // Опционально: ускоряет сортировку по времени отправления
  @@map("schedules")
}

enum RouteDirection {
  FORWARD
  BACKWARD
}

model Region {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  routes    Route[]

  @@map("regions")
}

model Route {
  id              String     @id @default(cuid())
  departureCity   City       @relation("RouteDepartureCity", fields: [departureCityId], references: [id])
  departureCityId String
  arrivalCity     City       @relation("RouteArrivalCity", fields: [arrivalCityId], references: [id])
  arrivalCityId   String
  photoName       String?
  schedules       Schedule[]
  region          Region?    @relation(fields: [regionId], references: [id])
  regionId        String?
  isActive        Boolean    @default(true)
  price           Int
  departureDate   DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  bookings        Booking[]

  @@index([departureCityId, arrivalCityId, isActive])
  @@index([regionId])
  @@index([price])
  @@index([departureDate])
  @@map("routes")
}

model Booking {
  id               String         @id @default(cuid())
  firstName        String
  lastName         String
  phoneNumber      String
  telegram         Boolean
  whatsapp         Boolean
  extraPhoneNumber String?
  extraTelegram    Boolean        @default(false)
  extraWhatsapp    Boolean        @default(false)
  direction        RouteDirection @default(FORWARD) // FORWARD = A → B, BACKWARD = B → A
  route            Route?         @relation(fields: [routeId], references: [id])
  routeId          String?
  travelDate       DateTime
  telegramId       BigInt?
  seatsCount       Int
  status           BookingStatus  @default(PENDING)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([status, routeId, travelDate])
  @@index([phoneNumber])
  @@index([telegramId])
  @@map("bookings")
}
